package com.aspectsecurity.contrast.contrastjenkins;

import com.contrastsecurity.http.FilterForm;
import com.contrastsecurity.http.UrlBuilder;
import com.contrastsecurity.models.Traces;
import com.contrastsecurity.sdk.ContrastSDK;
import hudson.AbortException;
import hudson.Extension;
import hudson.Launcher;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.BuildListener;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.BuildStepMonitor;
import hudson.tasks.Publisher;
import hudson.tasks.Recorder;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


/**
 * Vulnerability Trend Builder
 * <p>
 * Checks the number of vulnerabilities in the application against the configured threshold.
 */
public class VulnerabilityTrendRecorder extends Recorder {
    private List<ThresholdCondition> conditions;


    // @DataBoundConstructor
    public VulnerabilityTrendRecorder(List<ThresholdCondition> conditions) {
        this.conditions = conditions;
    }

    public List<ThresholdCondition> getConditions() {
        return conditions;
    }

    @Override
    public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, final BuildListener listener) throws InterruptedException, IOException {
        logMessage(listener, "Checking the number of vulnerabilities for this application.");
        ContrastSDK contrastSDK;
        Traces traces;

        TeamServerProfile profile = build.getProject().getProperty(ContrastPluginConfig.class).getProfile();

        if (profile.getApplicationId() == null) {
            throw new AbortException("An application id must be configured to check for vulnerabilities.");
        }

        if (profile.getOrgUuid() == null) {
            throw new AbortException("An organization id must be configured to check for vulnerabilities.");
        }

        contrastSDK = new ContrastSDK(profile.getUsername(), profile.getServiceKey(), profile.getApiKey(), profile.getTeamServerUrl());

        for (ThresholdCondition condition : conditions) {
            try {
                FilterForm filterForm = new FilterForm();

                if (condition.getThresholdSeverity() != null) {
                    filterForm.setSeverities(UrlBuilder.getSeverityList(condition.getThresholdSeverity()));
                } else {
                    filterForm = null;
                }

                if (condition.getThresholdVulnType() == null) {
                    traces = contrastSDK.getTracesWithFilter(profile.getOrgUuid(), profile.getApplicationId(), filterForm);
                } else {
                    traces = contrastSDK.getTraceFilterByRule(profile.getOrgUuid(), profile.getApplicationId(), condition.getThresholdVulnType(), filterForm);
                }
            } catch (Exception e) {
                logMessage(listener, e.getMessage());
                throw new AbortException("Unable to connect to TeamServer.");
            }

            if (traces.getCount() > Integer.parseInt(condition.getThresholdCount())) {
                logMessage(listener, "Vulnerability count is too high! " + "This application has " + traces.getCount() + " vulnerability(s).");

                throw new AbortException();
            } else {
                logMessage(listener, "Vulnerability count is under the threshold. Build passes all conditions.");
            }
        }

        return true;
    }

    /**
     * Helper method for logging messages.
     *
     * @param listener Listener
     * @param msg      String to log
     */
    private void logMessage(BuildListener listener, String msg) {
        listener.getLogger().println("[Contrast - VulnerabilityTrendRecorder] - " + msg);
    }

    @Override
    public DescriptorImpl getDescriptor() {
        System.out.println("do we get in here");

        return (DescriptorImpl) super.getDescriptor();
    }

    @Override
    public BuildStepMonitor getRequiredMonitorService() {
        return BuildStepMonitor.NONE;
    }

    /**
     * Descriptor for {@link VulnerabilityTrendRecorder}.
     */
    @Extension
    public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {

        private List<ThresholdCondition> conditions = new ArrayList<>();

        public DescriptorImpl() {
            super(VulnerabilityTrendRecorder.class);
            load();
        }

        /**
         * Validation of the 'thresholdCount' form Field.
         *
         * @param value This parameter receives the value that the user has typed.
         * @return Indicates the outcome of the validation. This is sent to the browser.
         */
        public FormValidation doCheckThresholdCount(@QueryParameter String value) {

            if (value.length() > 0) {
                try {
                    int temp = Integer.parseInt(value);

                    if (temp < 0) {
                        return FormValidation.error("Please enter a positive integer.");
                    }

                } catch (NumberFormatException e) {
                    return FormValidation.error("Please enter a valid integer.");
                }
            }

            return FormValidation.ok();
        }

        /**
         * Validation of the 'thresholdSeverity' form Field.
         *
         * @param value This parameter receives the value that the user has typed.
         * @return Indicates the outcome of the validation. This is sent to the browser.
         */
        public FormValidation doCheckThresholdSeverity(@QueryParameter String value) {
            return FormValidation.ok();
        }

        /**
         * Validation of the 'thresholdCategory' form Field.
         *
         * @param value This parameter receives the value that the user has typed.
         * @return Indicates the outcome of the validation. This is sent to the browser.
         */
        public FormValidation doCheckThresholdVulnType(@QueryParameter String value) {
            return FormValidation.ok();
        }


        public List<String> getSeverities() {
            return SEVERITIES;
        }

        /**
         * Fills the Threshold Category select drop down with categories for the configured application.
         *
         * @return ListBoxModel filled with categories.
         */
        public ListBoxModel doFillThresholdVulnTypeItems() {
            ListBoxModel items = new ListBoxModel();

            items.add(EMPTY_SELECT, null);

            /*for (String category : CATEGORIES) {
                items.add(category, category);
            }*/

            return items;
        }

        /**
         * Fills the Threshold Severity select drop down with severities for the configured application.
         *
         * @return ListBoxModel filled with severities.
         */
        public ListBoxModel doFillThresholdSeverityItems() {
            ListBoxModel items = new ListBoxModel();
            items.add(EMPTY_SELECT, null);

            for (String severity : SEVERITIES) {
                items.add(severity, severity);
            }

            return items;
        }

        /**
         * Allows this builder to be available for all classes.
         *
         * @param aClass Passed in class.
         * @return true
         */
        public boolean isApplicable(Class<? extends AbstractProject> aClass) {
            return true;
        }

        /**
         * Display name in the Build Action dropdown.
         *
         * @return String
         */
        public String getDisplayName() {
            return "Verify Vulnerability Threshold";
        }

        /*
         * Save's the publisher's configuration data.
         *
         * @param req  StaplerRequest
         * @param json Json of the form for this Publisher
         * @return if the save was successful
         * @throws FormException invalid form

        @Override
        public boolean configure(StaplerRequest req, JSONObject json) throws FormException {
            final JSONArray array = json.optJSONArray("condition");

            if (array != null) {
                conditions.replaceBy(req.bindJSONToList(ThresholdCondition.class, array));
            } else {
                if (json.keySet().isEmpty()) {
                    conditions = new ArrayList<>();
                } else {
                    conditions.replaceBy(req.bindJSON(ThresholdCondition.class, json.getJSONObject("condition")));
                }
            }

            save();

            return true;
        }
         */

        @Override
        public Publisher newInstance(StaplerRequest req, JSONObject json) throws FormException {
            System.out.println(json.toString());

            final JSONArray array = json.optJSONArray("conditions");

            if (array != null) {
                conditions.addAll(req.bindJSONToList(ThresholdCondition.class, array));
            } else {
                if (json.keySet().isEmpty()) {
                    conditions = new ArrayList<>();
                } else {
                    conditions.add(req.bindJSON(ThresholdCondition.class, json.getJSONObject("conditions")));
                }
            }

            save();

            return new VulnerabilityTrendRecorder(conditions);
        }
    }

    private static final List<String> SEVERITIES = Arrays.asList("Note", "Low", "Medium", "High", "Critical");
    private static final String EMPTY_SELECT = "None";
}

