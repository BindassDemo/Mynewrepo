package com.aspectsecurity.contrast.contrastjenkins;

import com.contrastsecurity.exceptions.UnauthorizedException;
import com.contrastsecurity.http.FilterForm;
import com.contrastsecurity.http.ServerFilterForm;
import com.contrastsecurity.http.UrlBuilder;
import com.contrastsecurity.models.Servers;
import com.contrastsecurity.models.Trace;
import com.contrastsecurity.models.Traces;
import com.contrastsecurity.sdk.ContrastSDK;
import hudson.AbortException;
import hudson.Extension;
import hudson.Launcher;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.Action;
import hudson.model.BuildListener;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.BuildStepMonitor;
import hudson.tasks.Publisher;
import hudson.tasks.Recorder;
import hudson.util.ListBoxModel;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.StaplerRequest;

import java.io.IOException;
import java.util.*;


/**
 * Vulnerability Trend Builder
 * <p>
 * Checks the number of vulnerabilities in the application against the configured threshold.
 */
public class VulnerabilityTrendRecorder extends Recorder {
    private List<ThresholdCondition> conditions;
    private String teamServerProfileName;

    @DataBoundConstructor
    public VulnerabilityTrendRecorder(List<ThresholdCondition> conditions, String teamServerProfileName) {
        this.conditions = conditions;
        this.teamServerProfileName = teamServerProfileName;
    }

    public List<ThresholdCondition> getConditions() {
        return conditions;
    }

    public TeamServerProfile getProfile() {
        return getProfile(teamServerProfileName);
    }

    public String getTeamServerProfileName() {
        return teamServerProfileName;
    }

    private static TeamServerProfile getProfile(String profileName) {
        final TeamServerProfile[] profiles = new ContrastPluginConfig.ContrastPluginConfigDescriptor().getTeamServerProfiles();

        if (profileName == null && profiles.length > 0)
            return profiles[0];

        for (TeamServerProfile profile : profiles) {
            if (profile.getName().equals(profileName))
                return profile;
        }
        return null;
    }

    @Override
    public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, final BuildListener listener) throws InterruptedException, IOException {
        logMessage(listener, "Checking the number of vulnerabilities for this application.");
        ContrastSDK contrastSDK;
        Traces traces;

        TeamServerProfile profile = getProfile();

        if (profile.getApplicationId() == null) {
            throw new AbortException("An application id must be configured to check for vulnerabilities.");
        }

        if (profile.getOrgUuid() == null) {
            throw new AbortException("An organization id must be configured to check for vulnerabilities.");
        }

        if (profile.getServerName() == null) {
            throw new AbortException("A server name must be configured to check for vulnerabilities.");
        }

        contrastSDK = new ContrastSDK(profile.getUsername(), profile.getServiceKey(), profile.getApiKey(), profile.getTeamServerUrl());

        ServerFilterForm serverFilterForm = new ServerFilterForm();
        serverFilterForm.setApplicationIds(Arrays.asList(profile.getApplicationId()));
        serverFilterForm.setQ(profile.getServerName());

        Servers servers;
        long serverId;

        try {
            servers = contrastSDK.getServersWithFilter(profile.getOrgUuid(), serverFilterForm);
        } catch (IOException e) {
            throw new AbortException("Unable to retrieve the servers.");
        } catch (UnauthorizedException e) {
            throw new AbortException("Unable to connect to TeamServer.");
        }

        if (!servers.getServers().isEmpty()) {
            serverId = servers.getServers().get(0).getServerId();
        } else {
            throw new AbortException("Server with name '" + profile.getServerName() + "' not found.");
        }

        // iterate over conditions; fail on first
        for (ThresholdCondition condition : conditions) {
            int vulnTypeCount = 0; // used for vuln type

            try {
                FilterForm filterForm = new FilterForm();

                if (condition.getThresholdSeverity() != null) {
                    filterForm.setSeverities(UrlBuilder.getSeverityList(condition.getThresholdSeverity()));
                } else {
                    filterForm = null;
                }

                if (condition.getThresholdVulnType() == null) {
                    traces = contrastSDK.getTracesWithFilter(profile.getOrgUuid(), profile.getApplicationId(), "servers", Long.toString(serverId), filterForm);
                } else {
                    traces = contrastSDK.getTraceFilterByRule(profile.getOrgUuid(), profile.getApplicationId(), condition.getThresholdVulnType(), filterForm);

                    for (Trace trace: traces.getTraces()) {
                        if (trace.getRule().equals(condition.getThresholdVulnType())) {
                            vulnTypeCount += 1;
                        }
                    }
                }
            } catch (Exception e) {
                logMessage(listener, e.getMessage());
                throw new AbortException("Unable to connect to TeamServer.");
            }

            buildResult(traces, build);

            int thresholdCount = Integer.parseInt(condition.getThresholdCount());

            if ((condition.getThresholdVulnType() != null && vulnTypeCount > thresholdCount) || traces.getCount() > thresholdCount) {
                logMessage(listener, "Vulnerability count is too high! " + "This application has " + traces.getCount() + " vulnerability(s).");

                throw new AbortException();
            } else {
                logMessage(listener, "Vulnerability count is under the threshold. Build passes all conditions.");
            }
        }

        return true;
    }

    /**
     * Helper method for logging messages.
     *
     * @param listener Listener
     * @param msg      String to log
     */
    private void logMessage(BuildListener listener, String msg) {
        listener.getLogger().println("[Contrast - VulnerabilityTrendRecorder] - " + msg);
    }

    @Override
    public DescriptorImpl getDescriptor() {
        return (DescriptorImpl) super.getDescriptor();
    }

    @Override
    public BuildStepMonitor getRequiredMonitorService() {
        return BuildStepMonitor.NONE;
    }

    @Override
    public Action getProjectAction(AbstractProject<?, ?> project) {
        return new VulnerabilityTrendProjectAction(project);
    }

    /**
     * Descriptor for {@link VulnerabilityTrendRecorder}.
     */
    @Extension
    public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {

        private List<ThresholdCondition> conditions;
        private String teamServerProfileName;

        public DescriptorImpl() {
            super(VulnerabilityTrendRecorder.class);
            load();
        }

        @SuppressWarnings("unused")
        public ListBoxModel doFillTeamServerProfileNameItems() {
            final ListBoxModel model = new ListBoxModel();

            for (TeamServerProfile profile : new ContrastPluginConfig.ContrastPluginConfigDescriptor().getTeamServerProfiles()) {
                model.add(profile.getName(), profile.getName());
            }

            return model;
        }

        /**
         * Allows this builder to be available for all classes.
         *
         * @param aClass Passed in class.
         * @return true
         */
        public boolean isApplicable(Class<? extends AbstractProject> aClass) {
            return true;
        }

        /**
         * Display name in the Build Action dropdown.
         *
         * @return String
         */
        public String getDisplayName() {
            return "Verify Vulnerability Threshold";
        }

        /**
         * Save's the publisher's config.jelly data.
         *
         * @param req  StaplerRequest
         * @param json Json of the form for this Publisher
         * @return if the save was successful
         * @throws FormException invalid form
         */
        @Override
        public Publisher newInstance(StaplerRequest req, JSONObject json) throws FormException {
            final JSONArray array = json.optJSONArray("conditions");

            if (array != null) {
                conditions = req.bindJSONToList(ThresholdCondition.class, array);
            } else {
                if (json.keySet().isEmpty()) {
                    conditions = new ArrayList<>();
                } else {
                    conditions.clear();
                    conditions.add(req.bindJSON(ThresholdCondition.class, json.getJSONObject("conditions")));
                }
            }

            save();

            return new VulnerabilityTrendRecorder(conditions, (String) json.get("teamServerProfileName"));
        }

        public void setTeamServerProfileName(String teamServerProfileName) {
            this.teamServerProfileName = teamServerProfileName;
        }

        public void setConditions(List<ThresholdCondition> conditions) {
            this.conditions = conditions;
        }
    }

    private void buildResult(Traces traces, AbstractBuild<?, ?> build) {
        Map<String, Integer> traceResult = new HashMap<>();
        Map<String, Integer> severityResult = new HashMap<>();


        for (Trace trace : traces.getTraces()) {

            if (severityResult.containsKey(trace.getSeverity())) {
                Integer previousCount = severityResult.get(trace.getSeverity());
                severityResult.put(trace.getSeverity(), previousCount + 1);
            } else {
                severityResult.put(trace.getSeverity(), 1);
            }

            if (traceResult.containsKey(trace.getRule())) {
                Integer previousCount = traceResult.get(trace.getRule());
                traceResult.put(trace.getRule(), previousCount + 1);
            } else {
                traceResult.put(trace.getRule(), 1);
            }
        }

        // Add remaining severities for chart
        for (String severity : SEVERITIES) {
            if (!severityResult.containsKey(severity)) {
                severityResult.put(severity, 0);
            }
        }

        VulnerabilityTrendResult result = new VulnerabilityTrendResult(traceResult, severityResult);

        build.addAction(new VulnerabilityFrequencyAction(result, build));
    }

    private static final List<String> SEVERITIES = Arrays.asList("Note", "Low", "Medium", "High", "Critical");

}