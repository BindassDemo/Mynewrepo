package com.aspectsecurity.contrast.contrastjenkins;

import com.contrastsecurity.http.FilterForm;
import com.contrastsecurity.http.UrlBuilder;
import com.contrastsecurity.models.TraceFilter;
import com.contrastsecurity.models.TraceListing;
import com.contrastsecurity.models.Traces;
import com.contrastsecurity.sdk.ContrastSDK;
import hudson.AbortException;
import hudson.Extension;
import hudson.Launcher;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.BuildListener;
import hudson.model.Descriptor;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.BuildStepMonitor;
import hudson.tasks.Publisher;
import hudson.tasks.Recorder;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import jenkins.model.Jenkins;
import net.sf.json.JSONObject;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;

import javax.servlet.ServletException;
import java.io.IOException;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;


/**
 * Vulnerability Trend Builder
 *
 * Checks the number of vulnerabilities in the application against the configured threshold.
 */
public class VulnerabilityTrendRecorder extends Recorder implements Serializable {
    private static final long serialVersionUID = 1L;

    private String thresholdCount;

    private String thresholdCategory;

    private String thresholdSeverity;

    public static final List<String> SEVERITIES = Arrays.asList("Note", "Low", "Medium", "High", "Critical");

    @DataBoundConstructor
    public VulnerabilityTrendRecorder(String thresholdCount, String thresholdCategory, String thresholdSeverity) {
        this.thresholdCount = thresholdCount;
        this.thresholdCategory = thresholdCategory;
        this.thresholdSeverity = thresholdSeverity;
    }

    @Override
    public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, final BuildListener listener) throws InterruptedException, IOException {
        listener.getLogger().println("Checking the number of vulnerabilities for this application.");
        ContrastSDK contrastSDK;

        try {
            contrastSDK = new ContrastSDK("contrast_admin", "demo", "demo", "http://localhost:19080/Contrast/api");

            FilterForm filterForm = new FilterForm();

            if (thresholdSeverity != null) {
                filterForm.setSeverities(UrlBuilder.getSeverityList(thresholdSeverity));
            } else {
                filterForm = null;
            }

            Traces traces;
            if (thresholdCategory != null) {
                traces = contrastSDK.getTracesWithFilter("b2d57418-77a7-484c-8206-c4d150e2ebd7", "f176a213-ce80-4b13-a5ee-b2cb0f25cd3e", filterForm);
            } else {
                traces = contrastSDK.getTraceFilterByRule("b2d57418-77a7-484c-8206-c4d150e2ebd7", "f176a213-ce80-4b13-a5ee-b2cb0f25cd3e", thresholdCategory, filterForm);
            }

            if (traces.getCount() > Integer.parseInt(thresholdCount)) {
                listener.getLogger().println("Vulnerability count is too high! " + "This application has " + traces.getCount() + " vulnerability(s).");
            } else {
                listener.getLogger().println("Vulnerability count is under the threshold.");
            }

        } catch (Exception e) {
            throw new AbortException("Unable to connect to TeamServer.");
        }

        return true;
    }

    @Override
    public DescriptorImpl getDescriptor() {
        return (DescriptorImpl) super.getDescriptor();
    }

    private static Descriptor getTopLevelDescriptor() {
        Descriptor sad = Jenkins.getInstance().getDescriptor(TeamServerConnectionBuilder.class);
        sad.load();

        return sad;
    }

    @Override
    public BuildStepMonitor getRequiredMonitorService() {
        return BuildStepMonitor.NONE;
    }

    /**
     * Descriptor for {@link VulnerabilityTrendRecorder}. Used as a singleton.
     * The class is marked as public so that it can be accessed from views.
     * <p>
     * See <tt>src/main/resources/com/aspectsecurity/contrast/contrastjenkins/VulnerabilityTrendRecorder/*.jelly</tt>
     * for the actual HTML fragment for the configuration screen.
     */
    @Extension
    public static final class DescriptorImpl extends BuildStepDescriptor<Publisher> {

        public DescriptorImpl() {
            load();
        }

        /**
         * Validation of the 'thresholdCount' form Field.
         *
         * @param value This parameter receives the value that the user has typed.
         * @return Indicates the outcome of the validation. This is sent to the browser.
         */
        public FormValidation doCheckThresholdCount(@QueryParameter String value) throws IOException, ServletException {

            if (value.length() > 0) {
                try {
                    Integer.parseInt(value);
                } catch (NumberFormatException e) {
                    return FormValidation.error("Please enter a valid integer.");
                }
            }

            return FormValidation.ok();
        }

        /**
         * Validation of the 'thresholdSeverity' form Field.
         *
         * @param value This parameter receives the value that the user has typed.
         * @return Indicates the outcome of the validation. This is sent to the browser.
         */
        public FormValidation doCheckThresholdSeverity(@QueryParameter String value) throws IOException, ServletException {
            return FormValidation.ok();
        }

        /**
         * Validation of the 'thresholdCategory' form Field.
         *
         * @param value This parameter receives the value that the user has typed.
         * @return Indicates the outcome of the validation. This is sent to the browser.
         */
        public FormValidation doCheckThresholdCategory(@QueryParameter String value) throws IOException, ServletException {
            return FormValidation.ok();
        }


        public ListBoxModel doFillThresholdCategoryItems() {
            ListBoxModel items = new ListBoxModel();

            items.add("None", null);

            for (TraceFilter filter : getTraceFilters()) {
                items.add(filter.getLabel(), filter.getLabel());
            }

            return items;
        }

        public ListBoxModel doFillThresholdSeverityItems() {
            ListBoxModel items = new ListBoxModel();
            items.add("None", null);

            for (String severity: SEVERITIES) {
                items.add(severity, severity.toLowerCase());
            }

            return items;
        }

        private List<TraceFilter> getTraceFilters() {
            ContrastSDK contrastSDK;

            try {
                contrastSDK = new ContrastSDK("contrast_admin", "demo", "demo", "http://localhost:19080/Contrast/api");

                TraceListing traces = contrastSDK.getTraceListing("b2d57418-77a7-484c-8206-c4d150e2ebd7", "f176a213-ce80-4b13-a5ee-b2cb0f25cd3e");

                return traces.getFilters();
            } catch (Exception e) {
                System.out.println(e.getMessage());
                return Collections.emptyList();
            }
        }

        /**
         * Allows this builder to be available for all classes.
         *
         * @param aClass Passed in class.
         * @return true
         */
        public boolean isApplicable(Class<? extends AbstractProject> aClass) {
            return true;
        }

        public String getDisplayName() {
            return "Verify Vulnerability Threshold";
        }

        @Override
        public boolean configure(StaplerRequest req, JSONObject formData) throws FormException {
            save();

            return super.configure(req, formData);
        }
    }
}

