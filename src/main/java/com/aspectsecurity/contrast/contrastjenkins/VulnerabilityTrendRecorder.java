package com.aspectsecurity.contrast.contrastjenkins;

import com.contrastsecurity.exceptions.UnauthorizedException;
import com.contrastsecurity.http.TraceFilterForm;
import com.contrastsecurity.models.Application;
import com.contrastsecurity.models.Applications;
import com.contrastsecurity.models.Trace;
import com.contrastsecurity.models.Traces;
import com.contrastsecurity.sdk.ContrastSDK;
import hudson.AbortException;
import hudson.Extension;
import hudson.Launcher;
import hudson.model.*;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.BuildStepMonitor;
import hudson.tasks.Publisher;
import hudson.tasks.Recorder;
import hudson.util.ListBoxModel;
import lombok.Getter;
import lombok.Setter;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.StaplerRequest;

import java.io.IOException;
import java.util.*;


/**
 * Vulnerability Trend Builder
 * <p>
 * Checks the number of vulnerabilities in the application against the configured threshold.
 */
@Getter
@Setter
public class VulnerabilityTrendRecorder extends Recorder {
    private List<ThresholdCondition> conditions;
    private String teamServerProfileName;

    @DataBoundConstructor
    public VulnerabilityTrendRecorder(List<ThresholdCondition> conditions, String teamServerProfileName) {
        this.conditions = conditions;
        this.teamServerProfileName = teamServerProfileName;
    }

    public TeamServerProfile getProfile() {
        return VulnerabilityTrendHelper.getProfile(teamServerProfileName);
    }

    @Override
    public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, final BuildListener listener) throws IOException {

        if (!build.isBuilding()) {
            return false;
        }

        VulnerabilityTrendHelper.logMessage(listener, "Checking the number of vulnerabilities for this application.");
        ContrastSDK contrastSDK;
        Traces traces;
        Set<Trace> resultTraces = new HashSet<>();

        TeamServerProfile profile = getProfile();

        contrastSDK = VulnerabilityTrendHelper.createSDK(profile.getUsername(), profile.getServiceKey(), profile.getApiKey(), profile.getTeamServerUrl());

        boolean ignoreContrastFindings = Boolean.parseBoolean(build.getBuildVariableResolver().resolve("ignoreContrastFindings"));

        // iterate over conditions; fail on first
        for (ThresholdCondition condition : conditions) {

            if (profile.isAllowGlobalThresholdConditionsOverride()) {

            }

            String applicationId = getApplicationId(contrastSDK, profile.getOrgUuid(), condition.getApplicationName());
            if (applicationId.equals("")) {
                VulnerabilityTrendHelper.logMessage(listener, "Application with name '" + condition.getApplicationName() + "' not found.");
                if (profile.isFailOnWrongApplicationName()) {
                    throw new AbortException("Application with name '" + condition.getApplicationName() + "' not found.");
                }
            }

            VulnerabilityTrendHelper.logMessage(listener, "Checking the threshold condition where " + condition.toString());

            try {
                TraceFilterForm filterForm = new TraceFilterForm();
                filterForm.setAppVersionTags(Collections.singletonList(VulnerabilityTrendHelper.buildAppVersionTag(build, condition.getApplicationName())));

                if (condition.getThresholdSeverity() != null) {
                    filterForm.setSeverities(VulnerabilityTrendHelper.getSeverityList(condition.getThresholdSeverity()));
                }

                if (condition.getThresholdVulnType() != null) {
                    filterForm.setVulnTypes(Collections.singletonList(condition.getThresholdVulnType()));
                }

                if (!condition.getVulnerabilityStatuses().isEmpty()) {
                    filterForm.setStatus(condition.getVulnerabilityStatuses());
                }

                traces = contrastSDK.getTracesInOrg(profile.getOrgUuid(), filterForm);
            } catch (Exception e) {
                VulnerabilityTrendHelper.logMessage(listener, e.getMessage());
                throw new AbortException("Unable to retrieve vulnerability information from TeamServer.");
            }

            resultTraces.addAll(traces.getTraces());

            int thresholdCount = condition.getThresholdCount(); // Integer.parseInt(condition.getThresholdCount());

            if (traces.getCount() > thresholdCount && !ignoreContrastFindings) {
                // save results before failing build
                buildResult(resultTraces, build);

                Result buildResult = Result.fromString(profile.getVulnerableBuildResult());
                VulnerabilityTrendHelper.logMessage(listener, "Failed on the threshold condition where " + condition.toString());
                VulnerabilityTrendHelper.logMessage(listener, VulnerabilityTrendHelper.getVulnerabilityInfoString(traces));
                if (buildResult.toString().equals(Result.FAILURE.toString())) {
                    throw new AbortException("Failed on the threshold condition where " + condition.toString());
                } else {
                    build.setResult(buildResult);
                    return true;
                }
            }
        }

        buildResult(resultTraces, build);

        VulnerabilityTrendHelper.logMessage(listener, "This build passes all vulnerability threshold conditions!");

        return true;
    }

    @Override
    public DescriptorImpl getDescriptor() {
        return (DescriptorImpl) super.getDescriptor();
    }

    @Override
    public BuildStepMonitor getRequiredMonitorService() {
        return BuildStepMonitor.NONE;
    }

    @Override
    public Action getProjectAction(AbstractProject<?, ?> project) {
        return new VulnerabilityTrendProjectAction(project);
    }


    /**
     * Descriptor for {@link VulnerabilityTrendRecorder}.
     */
    @Extension
    public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {

        private List<ThresholdCondition> conditions;

        public DescriptorImpl() {
            super(VulnerabilityTrendRecorder.class);
            load();
        }

        @SuppressWarnings("unused")
        public ListBoxModel doFillTeamServerProfileNameItems() {
            return VulnerabilityTrendHelper.getProfileNames();
        }

        /**
         * Allows this builder to be available for all classes.
         *
         * @param aClass Passed in class.
         * @return true
         */
        public boolean isApplicable(Class<? extends AbstractProject> aClass) {
            return true;
        }

        /**
         * Display name in the Build Action dropdown.
         *
         * @return String
         */
        public String getDisplayName() {
            return "Contrast - Verify Vulnerability Threshold";
        }

        /**
         * Save's the publisher's config.jelly data.
         *
         * @param req  StaplerRequest
         * @param json Json of the form for this Publisher
         * @return if the save was successful
         */
        @Override
        public Publisher newInstance(StaplerRequest req, JSONObject json) {
            final JSONArray array = json.optJSONArray("conditions");

            if (array != null) {
                conditions = req.bindJSONToList(ThresholdCondition.class, array);
            } else {
                conditions = new ArrayList<>();

                if (!json.keySet().isEmpty()) {
                    conditions.add(req.bindJSON(ThresholdCondition.class, json.getJSONObject("conditions")));
                }
            }

            save();

            return new VulnerabilityTrendRecorder(conditions, (String) json.get("teamServerProfileName"));
        }

        public void setConditions(List<ThresholdCondition> conditions) {
            this.conditions = conditions;
        }
    }


    /**
     * Builds a String representation of the Traces found when checking for vulnerabilities.
     *
     * @param traces - traces founding during build
     * @param build  - current build
     */
    private void buildResult(Set<Trace> traces, AbstractBuild<?, ?> build) {
        Map<String, Integer> traceResult = new HashMap<>();
        Map<String, Integer> severityResult = new HashMap<>();

        for (Trace trace : traces) {

            if (severityResult.containsKey(trace.getSeverity())) {
                Integer previousCount = severityResult.get(trace.getSeverity());
                severityResult.put(trace.getSeverity(), previousCount + 1);
            } else {
                severityResult.put(trace.getSeverity(), 1);
            }

            if (traceResult.containsKey(trace.getRule())) {
                Integer previousCount = traceResult.get(trace.getRule());
                traceResult.put(trace.getRule(), previousCount + 1);
            } else {
                traceResult.put(trace.getRule(), 1);
            }
        }

        // Add remaining severities for chart
        for (String severity : VulnerabilityTrendHelper.SEVERITIES) {
            if (!severityResult.containsKey(severity)) {
                severityResult.put(severity, 0);
            }
        }

        VulnerabilityTrendResult result = new VulnerabilityTrendResult(traceResult, severityResult);

        build.addAction(new VulnerabilityFrequencyAction(result, build));
    }

    private String getApplicationId(ContrastSDK sdk, String organizationUuid, String applicationName) {

        Applications applications;

        try {
            applications = sdk.getApplications(organizationUuid);
        } catch (IOException | UnauthorizedException e) {
            return "";
        }

        for (Application application : applications.getApplications()) {
            if (applicationName.equals(application.getName())) {
                return application.getId();
            }
        }

        return "";
    }

}
