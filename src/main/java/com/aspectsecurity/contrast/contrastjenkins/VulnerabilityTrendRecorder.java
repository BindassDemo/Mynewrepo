package com.aspectsecurity.contrast.contrastjenkins;

import com.contrastsecurity.http.FilterForm;
import com.contrastsecurity.http.UrlBuilder;
import com.contrastsecurity.models.TraceFilter;
import com.contrastsecurity.models.TraceListing;
import com.contrastsecurity.models.Traces;
import com.contrastsecurity.sdk.ContrastSDK;
import hudson.AbortException;
import hudson.Extension;
import hudson.Launcher;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.BuildListener;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.BuildStepMonitor;
import hudson.tasks.Publisher;
import hudson.tasks.Recorder;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import net.sf.json.JSONObject;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;

import javax.servlet.ServletException;
import java.io.IOException;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;


/**
 * Vulnerability Trend Builder
 * <p>
 * Checks the number of vulnerabilities in the application against the configured threshold.
 */
public class VulnerabilityTrendRecorder extends Recorder implements Serializable {
    private static final long serialVersionUID = 1L;

    private String thresholdCount;

    private String thresholdCategory;

    private String thresholdSeverity;

    private String applicationId;

    private String username;

    private String apiKey;

    private String serviceKey;

    private String orgUuid;

    private String teamServerUrl;

    private static final List<String> SEVERITIES = Arrays.asList("Note", "Low", "Medium", "High", "Critical");
    private static final String EMPTY_SELECT = "None";

    @DataBoundConstructor
    public VulnerabilityTrendRecorder(String thresholdCount, String thresholdCategory, String thresholdSeverity) {
        this.thresholdCount = thresholdCount;
        this.thresholdCategory = thresholdCategory;
        this.thresholdSeverity = thresholdSeverity;
    }

    public String getThresholdCount() {
        return thresholdCount;
    }

    public String getThresholdCategory() {
        return thresholdCategory;
    }

    public String getThresholdSeverity() {
        return thresholdSeverity;
    }

    public String getApplicationId() {
        return applicationId;
    }

    @Override
    public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, final BuildListener listener) throws InterruptedException, IOException {
        logMessage(listener, "Checking the number of vulnerabilities for this application.");
        ContrastSDK contrastSDK;

        String username = build.getProject().getProperty(ContrastPluginConfig.class).getUsername();
        String apiKey = build.getProject().getProperty(ContrastPluginConfig.class).getApiKey();
        String serviceKey = build.getProject().getProperty(ContrastPluginConfig.class).getServiceKey();
        String teamServerUrl = build.getProject().getProperty(ContrastPluginConfig.class).getTeamServerUrl();
        String orgUuid = build.getProject().getProperty(ContrastPluginConfig.class).getOrgUuid();

        try {
            contrastSDK = new ContrastSDK(username, apiKey, serviceKey, teamServerUrl);

            FilterForm filterForm = new FilterForm();

            if (thresholdSeverity != null) {
                filterForm.setSeverities(UrlBuilder.getSeverityList(thresholdSeverity));
            } else {
                filterForm = null;
            }

            Traces traces;

            if (thresholdCategory == null) {
                traces = contrastSDK.getTracesWithFilter(orgUuid, applicationId, filterForm);
            } else {
                traces = contrastSDK.getTraceFilterByRule(orgUuid, applicationId, thresholdCategory, filterForm);
            }

            if (traces.getCount() > Integer.parseInt(thresholdCount)) {
                logMessage(listener, "Vulnerability count is too high! " + "This application has " + traces.getCount() + " vulnerability(s).");
            } else {
                logMessage(listener, "Vulnerability count is under the threshold.");
            }

        } catch (Exception e) {
            logMessage(listener, e.getMessage());
            throw new AbortException("Unable to connect to TeamServer.");
        }

        return true;
    }

    /**
     * Helper method for logging messages.
     *
     * @param listener Listener
     * @param msg String to log
     */
    private void logMessage(BuildListener listener, String msg) {
        listener.getLogger().println("[Contrast - VulnerabilityTrendRecorder] - " + msg);
    }

    @Override
    public DescriptorImpl getDescriptor() {
        return (DescriptorImpl) super.getDescriptor();
    }

    @Override
    public BuildStepMonitor getRequiredMonitorService() {
        return BuildStepMonitor.NONE;
    }


    /**
     * Descriptor for {@link VulnerabilityTrendRecorder}.
     */
    @Extension
    public static final class DescriptorImpl extends BuildStepDescriptor<Publisher> {

        public DescriptorImpl() {
            load();
        }

        /**
         * Validation of the 'thresholdCount' form Field.
         *
         * @param value This parameter receives the value that the user has typed.
         * @return Indicates the outcome of the validation. This is sent to the browser.
         */
        public FormValidation doCheckThresholdCount(@QueryParameter String value) throws IOException, ServletException {

            if (value.length() > 0) {
                try {
                    int temp = Integer.parseInt(value);
                } catch (NumberFormatException e) {
                    return FormValidation.error("Please enter a valid integer.");
                }
            }

            return FormValidation.ok();
        }

        /**
         * Validation of the 'thresholdSeverity' form Field.
         *
         * @param value This parameter receives the value that the user has typed.
         * @return Indicates the outcome of the validation. This is sent to the browser.
         */
        public FormValidation doCheckThresholdSeverity(@QueryParameter String value) throws IOException, ServletException {
            return FormValidation.ok();
        }

        /**
         * Validation of the 'thresholdCategory' form Field.
         *
         * @param value This parameter receives the value that the user has typed.
         * @return Indicates the outcome of the validation. This is sent to the browser.
         */
        public FormValidation doCheckThresholdCategory(@QueryParameter String value) throws IOException, ServletException {
            return FormValidation.ok();
        }

        /**
         * Fills the Threshold Category select drop down with categories for the configured application.
         *
         * @return ListBoxModel filled with categories.
         */
        public ListBoxModel doFillThresholdCategoryItems() {
            ListBoxModel items = new ListBoxModel();

            items.add(EMPTY_SELECT, null);

            for (TraceFilter filter : getTraceFilters()) {
                items.add(filter.getLabel(), filter.getKeycode());
            }

            return items;
        }

        /**
         * Fills the Threshold Severity select drop down with severities for the configured application.
         *
         * @return ListBoxModel filled with severities.
         */
        public ListBoxModel doFillThresholdSeverityItems() {
            ListBoxModel items = new ListBoxModel();
            items.add(EMPTY_SELECT, null);

            for (String severity : SEVERITIES) {
                items.add(severity, severity);
            }

            return items;
        }

        /**
         * Queries TeamServer for the Trace Filters for a configured application.
         *
         * @return List of TraceFilters
         */
        private List<TraceFilter> getTraceFilters() {
            ContrastSDK contrastSDK;

            try {
                contrastSDK = new ContrastSDK("contrast_admin", "demo", "demo", "http://localhost:19080/Contrast/api");

                TraceListing traces = contrastSDK.getTraceListing("b2d57418-77a7-484c-8206-c4d150e2ebd7", "f176a213-ce80-4b13-a5ee-b2cb0f25cd3e");

                return traces.getFilters();
            } catch (Exception e) {
                System.out.println(e.getMessage());
                return Collections.emptyList();
            }
        }

        /**
         * Allows this builder to be available for all classes.
         *
         * @param aClass Passed in class.
         * @return true
         */
        public boolean isApplicable(Class<? extends AbstractProject> aClass) {
            return true;
        }

        /**
         * Display name in the Build Action dropdown.
         *
         * @return String
         */
        public String getDisplayName() {
            return "Verify Vulnerability Threshold";
        }

        // TODO newinstance

        /**
         * Save's the publisher's configuration data.
         *
         * @param req StaplerRequest
         * @param formData Json of the form for this Publisher
         * @return if the save was successful
         * @throws FormException
         */
        @Override
        public boolean configure(StaplerRequest req, JSONObject formData) throws FormException {
            save();

            System.out.println(req.toString());
            System.out.println(formData.toString());

            return super.configure(req, formData);
        }
    }
}

