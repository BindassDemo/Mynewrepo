package com.aspectsecurity.contrast.contrastjenkins;


import com.contrastsecurity.exceptions.UnauthorizedException;
import com.contrastsecurity.http.RuleSeverity;
import com.contrastsecurity.models.Rules;
import com.contrastsecurity.sdk.ContrastSDK;
import hudson.model.Run;
import hudson.model.TaskListener;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.List;

public class VulnerabilityTrendHelper {

    public static ContrastSDK createSDK(String username, String serviceKey, String apiKey, String teamServerUrl) {
        return new ContrastSDK(username, serviceKey, apiKey, teamServerUrl);
    }

    public static TeamServerProfile getProfile(String profileName) {
        if (profileName == null)
            return null;

        final TeamServerProfile[] profiles = new ContrastPluginConfig.ContrastPluginConfigDescriptor().getTeamServerProfiles();

        for (TeamServerProfile profile : profiles) {
            if (profile.getName().equals(profileName))
                return profile;
        }
        return null;
    }

    /**
     * Helper method for logging messages.
     *
     * @param listener Listener
     * @param msg      String to log
     */
    public static void logMessage(TaskListener listener, String msg) {
        listener.getLogger().println("[Contrast] - " + msg);
    }

    /**
     * Returns the sublist of severities greater than or equal to the configured severity level
     *
     * @param severity include severity to filter with severity list with
     * @return list of severity strings
     */
    public static EnumSet<RuleSeverity> getSeverityList(String severity) {

        List<String> severityList = SEVERITIES.subList(SEVERITIES.indexOf(severity), SEVERITIES.size());

        List<RuleSeverity> ruleSeverities = new ArrayList<>();

        for (String severityToAdd : severityList) {
            ruleSeverities.add(RuleSeverity.valueOf(severityToAdd.toUpperCase()));
        }

        return EnumSet.copyOf(ruleSeverities);
    }

    /**
     * Retrieves the enabled rules for an organization
     *
     * @param sdk              Contrast SDK object
     * @param organizationUuid uuid of the organization
     */
    public static List<VulnerabilityType> saveRules(ContrastSDK sdk, String organizationUuid) {
        Rules rules;
        List<VulnerabilityType> vulnerabilityTypes = new ArrayList<>();

        try {
            rules = sdk.getRules(organizationUuid);
        } catch (IOException | UnauthorizedException e) {
            return vulnerabilityTypes;
        }

        for (Rules.Rule rule : rules.getRules()) {
            vulnerabilityTypes.add(new VulnerabilityType(rule.getName(), rule.getTitle()));
        }

        return vulnerabilityTypes;
    }

    public static String buildAppVersionTag(Run<?, ?> build) {
        return build.getParent().getDisplayName() + "-" + build.getNumber();
    }

    public static final List<String> SEVERITIES = Arrays.asList("Note", "Low", "Medium", "High", "Critical");
}


