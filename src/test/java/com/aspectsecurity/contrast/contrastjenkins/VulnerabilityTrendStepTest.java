package com.aspectsecurity.contrast.contrastjenkins;

import com.contrastsecurity.http.TraceFilterForm;
import com.contrastsecurity.models.Traces;
import com.contrastsecurity.sdk.ContrastSDK;
import hudson.AbortException;
import hudson.model.Result;
import hudson.model.TaskListener;
import jenkins.model.Jenkins;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.io.PrintStream;

import static org.junit.Assert.assertNull;
import static org.mockito.BDDMockito.given;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.powermock.api.mockito.PowerMockito.*;


@RunWith(PowerMockRunner.class)
@PrepareForTest({Jenkins.class, VulnerabilityTrendStep.class, VulnerabilityTrendHelper.class})
public class VulnerabilityTrendStepTest {

    @Mock
    TaskListener taskListenerMock;
    @Mock
    PrintStream printStreamMock;
    @Mock
    Jenkins jenkins;
    @Mock
    VulnerabilityTrendHelper vulnerabilityTrendHelper;
    @Mock
    VulnerabilityTrendStep.VulnerabilityTrendStepDescriptorImpl vulnerabilityTrendStepDescriptor;

    @Before
    public void setUp() {
        PowerMockito.mockStatic(Jenkins.class);
        PowerMockito.mockStatic(VulnerabilityTrendStep.class);
        PowerMockito.mockStatic(VulnerabilityTrendHelper.class);

        when(jenkins.getDescriptorByType(VulnerabilityTrendStep.VulnerabilityTrendStepDescriptorImpl.class)).thenReturn(vulnerabilityTrendStepDescriptor);
    }

    @Test
    public void testSuccessfulBuild() throws Exception {
        VulnerabilityTrendStep.Execution stepExecution = spy(new VulnerabilityTrendStep.Execution());
        stepExecution.step = new VulnerabilityTrendStep("local", 10, null, null, "WebGoat", Constants.QUERY_BY_APP_VERSION_TAG_DEFAULT_FORMAT);

        when(Jenkins.getInstance()).thenReturn(jenkins);

        stepExecution.taskListener = taskListenerMock;

        when(taskListenerMock.getLogger()).thenReturn(printStreamMock);
        doNothing().when(printStreamMock).println();

        Traces tracesMock = mock(Traces.class);
        when(tracesMock.getCount()).thenReturn(0);

        ContrastSDK contrastSDKMock = mock(ContrastSDK.class);

        doReturn("test").when(stepExecution).getBuildName();

        given(VulnerabilityTrendHelper.createSDK(anyString(), anyString(), anyString(), anyString())).willReturn(contrastSDKMock);

        TeamServerProfile profile = mock(TeamServerProfile.class);

        given(VulnerabilityTrendHelper.getProfile(anyString())).willReturn(profile);

        when(contrastSDKMock.getTracesInOrg(anyString(), any(TraceFilterForm.class))).thenReturn(tracesMock);

        assertNull(stepExecution.run());
    }

    @Test
    public void testSuccessfulBuildWithParameter() throws Exception {
        VulnerabilityTrendStep.Execution stepExecution = spy(new VulnerabilityTrendStep.Execution());
        stepExecution.step = new VulnerabilityTrendStep("local", 10, null, null, "WebGoat", Constants.QUERY_BY_PARAMETER);

        when(Jenkins.getInstance()).thenReturn(jenkins);

        stepExecution.taskListener = taskListenerMock;

        when(taskListenerMock.getLogger()).thenReturn(printStreamMock);
        doNothing().when(printStreamMock).println();

        Traces tracesMock = mock(Traces.class);
        when(tracesMock.getCount()).thenReturn(0);

        ContrastSDK contrastSDKMock = mock(ContrastSDK.class);

        doReturn("test").when(stepExecution).getBuildName();

        given(VulnerabilityTrendHelper.createSDK(anyString(), anyString(), anyString(), anyString())).willReturn(contrastSDKMock);

        TeamServerProfile profile = mock(TeamServerProfile.class);

        given(VulnerabilityTrendHelper.getProfile(anyString())).willReturn(profile);

        when(contrastSDKMock.getTracesInOrg(anyString(), any(TraceFilterForm.class))).thenReturn(tracesMock);

        assertNull(stepExecution.run());
    }

    @Test(expected = AbortException.class)
    public void testUnsuccessfulBuild() throws Exception {
        VulnerabilityTrendStep.Execution stepExecution = spy(new VulnerabilityTrendStep.Execution());
        stepExecution.step = new VulnerabilityTrendStep("local", 10, "xss", "High", "WebGoat", Constants.QUERY_BY_APP_VERSION_TAG_DEFAULT_FORMAT);

        when(Jenkins.getInstance()).thenReturn(jenkins);

        stepExecution.taskListener = taskListenerMock;

        when(taskListenerMock.getLogger()).thenReturn(printStreamMock);
        doNothing().when(printStreamMock).println();

        Traces tracesMock = mock(Traces.class);
        when(tracesMock.getCount()).thenReturn(11);

        ContrastSDK contrastSDKMock = mock(ContrastSDK.class);

        doReturn("test").when(stepExecution).getBuildName();

        given(VulnerabilityTrendHelper.createSDK(anyString(), anyString(), anyString(), anyString())).willReturn(contrastSDKMock);
        given(VulnerabilityTrendHelper.applicationIdExists(any(ContrastSDK.class), anyString(), anyString())).willReturn(true);

        TeamServerProfile profile = mock(TeamServerProfile.class);
        given(profile.getVulnerableBuildResult()).willReturn(Result.FAILURE.toString());
        given(profile.isFailOnWrongApplicationId()).willReturn(true);

        given(VulnerabilityTrendHelper.getProfile(anyString())).willReturn(profile);

        when(contrastSDKMock.getTracesInOrg(anyString(), any(TraceFilterForm.class))).thenReturn(tracesMock);

        assertNull(stepExecution.run());
    }
}