package com.aspectsecurity.contrast.contrastjenkins;

import com.aspectsecurity.contrast.contrastjenkins.ContrastPluginConfig.ContrastPluginConfigDescriptor;
import com.contrastsecurity.http.TraceFilterForm;
import com.contrastsecurity.models.Application;
import com.contrastsecurity.models.Applications;
import com.contrastsecurity.models.JobOutcomePolicy;
import com.contrastsecurity.models.Trace;
import com.contrastsecurity.models.Traces;
import com.contrastsecurity.sdk.ContrastSDK;
import com.google.common.collect.Lists;
import hudson.model.AbstractProject;
import hudson.model.ItemGroup;
import hudson.model.Job;
import hudson.model.Run;
import junit.framework.TestCase;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.ArrayList;
import java.util.List;

import static org.mockito.BDDMockito.times;
import static org.mockito.BDDMockito.verify;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.when;
import static org.powermock.api.mockito.PowerMockito.mock;

@RunWith(PowerMockRunner.class)
@PrepareForTest({VulnerabilityTrendHelper.class, ContrastPluginConfigDescriptor.class})
public class VulnerabilityTrendHelperTest extends TestCase {

    @Test
    public void testGetVulnerabilityInfoString() {
        Trace traceMock = mock(Trace.class);
        when(traceMock.getSeverity()).thenReturn("Medium");

        Trace traceMock2 = mock(Trace.class);
        when(traceMock2.getSeverity()).thenReturn("High");

        List<Trace> traces = new ArrayList<>();
        traces.add(traceMock);
        traces.add(traceMock2);

        Traces tracesMock = mock(Traces.class);
        when(tracesMock.getCount()).thenReturn(2);
        when(tracesMock.getTraces()).thenReturn(traces);

        String info = VulnerabilityTrendHelper.getVulnerabilityInfoString(tracesMock);
        assertEquals("Found vulnerabilities: Medium - 1 High - 1 .", info);
    }

    @Test
    public void testGetVulnerabilityInfoStringEmptyTraces() {

        List<Trace> traces = new ArrayList<>();

        Traces tracesMock = mock(Traces.class);
        when(tracesMock.getCount()).thenReturn(0);
        when(tracesMock.getTraces()).thenReturn(traces);

        String info = VulnerabilityTrendHelper.getVulnerabilityInfoString(tracesMock);
        assertEquals("", info);
    }

    @Test
    public void testGetVulnerabilityInfoStringNullTraces() {

        String info = VulnerabilityTrendHelper.getVulnerabilityInfoString(null);
        assertEquals("", info);
    }

    @Test
    public void testBuildAppVersionTagHierarchical() {
        String parentFullName = "project";
        int buildNumber = 1;
        String applicationId = "NodeTestBench";
        String appVersionTagActual = applicationId + "-" + parentFullName + "-" + buildNumber;

        Run<?, ?> build = mock(Run.class);

        Job parent = mock(Job.class);
        ItemGroup itemGroup = mock(ItemGroup.class);
        when(itemGroup.getFullName()).thenReturn("");
        when(parent.getParent()).thenReturn(itemGroup);

        when(build.getNumber()).thenReturn(buildNumber);
        when(build.getParent()).thenReturn(parent);
        when(parent.getFullName()).thenReturn(parentFullName);

        String appVersionTag = VulnerabilityTrendHelper.buildAppVersionTagHierarchical(build, applicationId);
        assertEquals(appVersionTag, appVersionTagActual);
    }

    @Test
    public void testGetAllTracesForApplication() throws Exception {
        Application application = mock(Application.class);
        ContrastSDK contrastSDKMock = mock(ContrastSDK.class);
        TraceFilterForm mockTraceFilterForm = mock(TraceFilterForm.class);
        Traces page1 = mock(Traces.class);
        Traces page2 = mock(Traces.class);

        List<Trace> traceList1 = new ArrayList<>();
        List<Trace> traceList2 = new ArrayList<>();

        for (int i = 0; i < 50; i++) {
            traceList1.add(mock(Trace.class));
        }

        traceList2.add(mock(Trace.class));

        PowerMockito.stub(PowerMockito.method(VulnerabilityTrendHelper.class, "createSDK")).toReturn(contrastSDKMock);

        when(application.getId()).thenReturn("test");
        when(page1.getCount()).thenReturn(51);
        when(page2.getCount()).thenReturn(51);
        when(page1.getTraces()).thenReturn(traceList1);
        when(page2.getTraces()).thenReturn(traceList2);
        when(contrastSDKMock.getTraces(anyString(), anyString(), any(TraceFilterForm.class)))
                .thenReturn(page1)
                .thenReturn(page2);

        Traces tracesReturned = VulnerabilityTrendHelper.getAllTraces(contrastSDKMock, "1", application.getId(), mockTraceFilterForm);

        assertEquals(51, tracesReturned.getTraces().size());
        verify(contrastSDKMock, times(2)).getTraces(anyString(), anyString(), any(TraceFilterForm.class));
    }

    @Test
    public void testGetAllTracesNullApplication() throws Exception {
        Application application = mock(Application.class);
        ContrastSDK contrastSDKMock = mock(ContrastSDK.class);
        TraceFilterForm mockTraceFilterForm = mock(TraceFilterForm.class);
        Traces page1 = mock(Traces.class);
        Traces page2 = mock(Traces.class);

        List<Trace> traceList1 = new ArrayList<>();
        List<Trace> traceList2 = new ArrayList<>();

        for (int i = 0; i < 50; i++) {
            traceList1.add(mock(Trace.class));
        }

        traceList2.add(mock(Trace.class));

        PowerMockito.stub(PowerMockito.method(VulnerabilityTrendHelper.class, "createSDK")).toReturn(contrastSDKMock);

        when(application.getId()).thenReturn("test");
        when(page1.getCount()).thenReturn(51);
        when(page2.getCount()).thenReturn(51);
        when(page1.getTraces()).thenReturn(traceList1);
        when(page2.getTraces()).thenReturn(traceList2);
        when(contrastSDKMock.getTracesInOrg(anyString(), any(TraceFilterForm.class)))
                .thenReturn(page1)
                .thenReturn(page2);

        Traces tracesReturned = VulnerabilityTrendHelper.getAllTraces(contrastSDKMock, "1", null, mockTraceFilterForm);

        assertEquals(51, tracesReturned.getTraces().size());
        verify(contrastSDKMock, times(2)).getTracesInOrg(anyString(), any(TraceFilterForm.class));
    }

    @Test
    public void testGetAllTracesWhenEmptyResponse() throws Exception {
        Application application = mock(Application.class);
        ContrastSDK contrastSDKMock = mock(ContrastSDK.class);
        TraceFilterForm mockTraceFilterForm = mock(TraceFilterForm.class);
        Traces page1 = mock(Traces.class);
        List<Trace> traceList = new ArrayList<>();

        PowerMockito.stub(PowerMockito.method(VulnerabilityTrendHelper.class, "createSDK")).toReturn(contrastSDKMock);

        when(application.getId()).thenReturn("test");
        when(page1.getCount()).thenReturn(0);
        when(page1.getTraces()).thenReturn(traceList);
        when(contrastSDKMock.getTraces(anyString(), anyString(), any(TraceFilterForm.class)))
                .thenReturn(page1);

        Traces tracesReturned = VulnerabilityTrendHelper.getAllTraces(contrastSDKMock, "1", application.getId(), mockTraceFilterForm);

        assertEquals(0, tracesReturned.getTraces().size());
        verify(contrastSDKMock, times(1)).getTraces(anyString(), anyString(), any(TraceFilterForm.class));
    }

    @Test
    public void testGetDefaultAgentFileNameFromStringJava() throws Exception {
        assertEquals("contrast.jar", VulnerabilityTrendHelper.getDefaultAgentFileNameFromString("Java"));
    }
    @Test
    public void testGetDefaultAgtestGetDefaultAgentFileNameFromStringNode() throws Exception {
        assertEquals("node-contrast.tgz", VulnerabilityTrendHelper.getDefaultAgentFileNameFromString("Node"));
    }
    @Test
    public void testGetDefaultAgtestGetDefaultAgentFileNameFromStringDotNet() throws Exception {
        assertEquals("dotnet-contrast.zip", VulnerabilityTrendHelper.getDefaultAgentFileNameFromString(".NET"));
    }
    @Test
    public void testGetDefaultAgtestGetDefaultAgentFileNameFromStringEmpty() throws Exception {
        assertEquals("contrast.jar", VulnerabilityTrendHelper.getDefaultAgentFileNameFromString(""));
    }

    @Test
    public void testIsEnabledJobOutcomePolicyExistFalse() throws Exception{
        ContrastSDK contrastSDKMock = mock(ContrastSDK.class);
        String orgUuId = "fakeOrgUuid";

        when(contrastSDKMock.getEnabledJobOutcomePolicies(orgUuId)).thenReturn(Lists.newArrayList());

        assertEquals(false, VulnerabilityTrendHelper.isEnabledJobOutcomePolicyExist(contrastSDKMock, orgUuId));
    }

    @Test
    public void testIsEnabledJobOutcomePolicyExistTrue() throws Exception{
        ContrastSDK contrastSDKMock = mock(ContrastSDK.class);
        String orgUuId = "fakeOrgUuid";
        ArrayList<JobOutcomePolicy> jobOutcomePolicies = new ArrayList<>();
        jobOutcomePolicies.add(new JobOutcomePolicy());

        when(contrastSDKMock.getEnabledJobOutcomePolicies(orgUuId)).thenReturn(jobOutcomePolicies);

        assertEquals(true, VulnerabilityTrendHelper.isEnabledJobOutcomePolicyExist(contrastSDKMock, orgUuId));
    }

    @Test
    public void testIsApplicableEnabledJobOutcomePolicyExistFalse() throws Exception{
        ContrastSDK contrastSDKMock = mock(ContrastSDK.class);
        String orgUuId = "fakeOrgUuid";
        String appId = "fakeAppId";

        List<Application> applicationList = new ArrayList<>();
        Application application = mock(Application.class);
        when(application.getId()).thenReturn(appId);
        applicationList.add(application);

        Applications applications = mock(Applications.class);
        when(applications.getApplications()).thenReturn(applicationList);
        when(contrastSDKMock.getApplications(anyString())).thenReturn(applications);
        when(contrastSDKMock.getEnabledJoboutcomePoliciesByApplication(orgUuId, appId)).thenReturn(Lists.newArrayList());

        assertFalse(VulnerabilityTrendHelper
            .isApplicableEnabledJobOutcomePolicyExist(contrastSDKMock, orgUuId, appId));
    }

    @Test
    public void testIsApplicableEnabledJobOutcomePolicyExistTrue() throws Exception{
        ContrastSDK contrastSDKMock = mock(ContrastSDK.class);
        String orgUuId = "fakeOrgUuid";
        String appId = "fakeAppId";
        ArrayList<JobOutcomePolicy> jobOutcomePolicies = new ArrayList<>();
        jobOutcomePolicies.add(new JobOutcomePolicy());

        List<Application> applicationList = new ArrayList<>();
        Application application = mock(Application.class);
        when(application.getId()).thenReturn(appId);
        applicationList.add(application);

        Applications applications = mock(Applications.class);
        when(applications.getApplications()).thenReturn(applicationList);
        when(contrastSDKMock.getApplications(anyString())).thenReturn(applications);
        when(contrastSDKMock.getEnabledJoboutcomePoliciesByApplication(orgUuId, appId)).thenReturn(jobOutcomePolicies);

        assertTrue(VulnerabilityTrendHelper
            .isApplicableEnabledJobOutcomePolicyExist(contrastSDKMock, orgUuId, appId));
    }

    @Test
    public void testGetProfileSpaceExists() throws Exception {
        ContrastPluginConfigDescriptor descriptorMock = mock(ContrastPluginConfigDescriptor.class);
        TeamServerProfile profile = mock(TeamServerProfile.class);
        when(profile.getName()).thenReturn("MyProfile");
        TeamServerProfile[] profiles = {profile};
        when(descriptorMock.getTeamServerProfiles()).thenReturn(profiles);

        PowerMockito.whenNew(ContrastPluginConfigDescriptor.class).withNoArguments().thenReturn(descriptorMock);
        TeamServerProfile actualProfile = VulnerabilityTrendHelper.getProfile("myprofile");

        assertNotNull(actualProfile);
        assertEquals("MyProfile", actualProfile.getName());
    }

    @Test
    public void testGetProfileMisMatchedCase() throws Exception {
        ContrastPluginConfigDescriptor descriptorMock = mock(ContrastPluginConfigDescriptor.class);
        TeamServerProfile profile = mock(TeamServerProfile.class);
        when(profile.getName()).thenReturn("MyProfile");
        TeamServerProfile[] profiles = {profile};
        when(descriptorMock.getTeamServerProfiles()).thenReturn(profiles);

        PowerMockito.whenNew(ContrastPluginConfigDescriptor.class).withNoArguments().thenReturn(descriptorMock);
        TeamServerProfile actualProfile = VulnerabilityTrendHelper.getProfile(" MyProfile ");

        assertNotNull(actualProfile);
        assertEquals("MyProfile", actualProfile.getName());
    }
}
