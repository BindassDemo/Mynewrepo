package com.aspectsecurity.contrast.contrastjenkins;

import com.contrastsecurity.http.TraceFilterForm;
import com.contrastsecurity.models.Application;
import com.contrastsecurity.models.Applications;
import com.contrastsecurity.models.Traces;
import com.contrastsecurity.sdk.ContrastSDK;
import hudson.Launcher;
import hudson.model.AbstractBuild;
import hudson.model.BuildListener;
import hudson.model.Result;
import hudson.model.TaskListener;
import jenkins.model.Jenkins;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.BDDMockito.given;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.powermock.api.mockito.PowerMockito.doReturn;
import static org.powermock.api.mockito.PowerMockito.mock;
import static org.powermock.api.mockito.PowerMockito.spy;

@RunWith(PowerMockRunner.class)
@PrepareForTest({Jenkins.class, VulnerabilityTrendRecorder.class, VulnerabilityTrendHelper.class})
public class VulnerabilityTrendRecorderTest {

    @Mock
    Jenkins jenkins;
    @Mock
    VulnerabilityTrendRecorder.DescriptorImpl vulnerabilityTrendRecorderDescriptor;


    @Before
    public void setUp() {
        PowerMockito.mockStatic(Jenkins.class);
        PowerMockito.mockStatic(VulnerabilityTrendRecorder.class);
        PowerMockito.mockStatic(VulnerabilityTrendHelper.class);

        when(jenkins.getDescriptorByType(VulnerabilityTrendRecorder.DescriptorImpl.class)).thenReturn(vulnerabilityTrendRecorderDescriptor);
    }

    @Test
    public void testSuccessfulBuild() throws Exception {

        List<ThresholdCondition> conditions = new ArrayList<>();
        ThresholdCondition thresholdCondition = mock(ThresholdCondition.class);
        when(thresholdCondition.getApplicationName()).thenReturn("test");
        when(thresholdCondition.getThresholdCount()).thenReturn(0);
        when(thresholdCondition.getThresholdSeverity()).thenReturn("test");
        when(thresholdCondition.getThresholdVulnType()).thenReturn("test");
        conditions.add(thresholdCondition);

        VulnerabilityTrendRecorder vulnerabilityTrendRecorder = spy(new VulnerabilityTrendRecorder(conditions, "test"));

        when(Jenkins.getInstance()).thenReturn(jenkins);

        Traces tracesMock = mock(Traces.class);
        when(tracesMock.getCount()).thenReturn(0);

        ContrastSDK contrastSDKMock = mock(ContrastSDK.class);

        given(VulnerabilityTrendHelper.createSDK(anyString(), anyString(), anyString(), anyString())).willReturn(contrastSDKMock);

        TeamServerProfile profile = new TeamServerProfile("local", "contrast", "demo", "demo",
                "www.google.com", "org-uuid", "Jenkins", false, Result.FAILURE.toString());

        given(VulnerabilityTrendHelper.getProfile(anyString())).willReturn(profile);

        Applications applications = mock(Applications.class);
        Application application = mock(Application.class);
        when(application.getId()).thenReturn("test");
        when(application.getName()).thenReturn("test");

        List<Application> apps = new ArrayList<>();
        apps.add(application);

        when(contrastSDKMock.getApplications(anyString())).thenReturn(applications);
        when(contrastSDKMock.getTracesInOrg(anyString(), any(TraceFilterForm.class))).thenReturn(tracesMock);

        AbstractBuild<?, ?> build = mock(AbstractBuild.class);
        Launcher launcher = mock(Launcher.class);
        BuildListener listener = mock(BuildListener.class);

        when(build.isBuilding()).thenReturn(true);
        when(build.getNumber()).thenReturn(1);

        assertTrue(vulnerabilityTrendRecorder.perform(build, launcher, listener));
    }

}
